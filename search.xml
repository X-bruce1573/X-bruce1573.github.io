<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="2021/05/13/test/"/>
      <url>2021/05/13/test/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c++"><code class="language-c++">  #include<iostream>  using namespace std;    int main()  {      cout <<"hello world"<< endl;      system("pause");      return 0;  }</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟程序员内功心法--C++</title>
      <link href="2021/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/"/>
      <url>2021/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>C++是在C语言的基础上开发的一种面向对象编程语言，应用非常广泛。常用于系统开发，引擎开发等应用领域，支持类、封装、继承、多态等特性。此外，C++语言灵活，运算符的数据结构丰富、具有结构化控制语句、程序执行效率高，而且具有高级语言与汇编语言的优点。正因为这样，C++作为最复杂的语言之一，其内容也是纷繁复杂，对于学习者来说是不小的挑战！<span class="github-emoji"><span>💔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>作为一名初级菜鸟程序员<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，虽然C++学习道路漫漫，但本着励志做一名可以光明正大摸鱼的程序员来说<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>博主最近也在如火如荼的进行着C++学习，现在将近半个月的学习笔记心得记录总结，希望可以对有缘人有所帮助。货不多说上干货！<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>（本篇较为基础适合小白入门，亲测有效！）</p><p>编译器：vscode  (当然也可以用Visual Studio集成开发环境等)，配置请看我的另一篇文章</p><p>重要的事情说三遍：一定要亲手敲出来！一定要亲手敲出来！一定要亲手敲出来！加油！！！</p><h1 id="C-学习-1-0-初级编程"><a href="#C-学习-1-0-初级编程" class="headerlink" title="C++学习-1.0_初级编程"></a>C++学习-1.0_初级编程</h1><p>##一、C++初识</p><h3 id="1-1-hello-world"><a href="#1-1-hello-world" class="headerlink" title="1.1 hello world"></a><strong>1.1 hello world</strong></h3><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main(){    cout <<"hello world"<< endl;    system("pause");    return 0;}</code></pre><ul><li><p>单行注释//；多行注释/*   */</p><p><em>main函数是一个程序的入口</em>  ==一个源文件里main函数只能有一个==</p></li></ul><h3 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a><strong>2.1 变量</strong></h3><p>  存在的意义：方便管理内存空间</p><p>  变量创建： 数据类型    变量名称 = 变量初始值 ==int a=10==</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main(){   int a=10;    cout <<"a="<< a <<endl;    system("pause");    return 0;}</code></pre><h3 id="3-1-常量"><a href="#3-1-常量" class="headerlink" title="3.1 常量"></a><strong>3.1 常量</strong></h3><pre class=" language-c++"><code class="language-c++">用于记录不可修改的数据，一旦修改就会报错c++两种定义方式：`1.#define   常量名   常量值==通常在文件上方定义==   ``2.const    数据类型   常量名=常量值  `+ 通常在变量定义前面加关键字const,修饰该变量为常量。不可修改</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;//#define 宏常量#define DAY 7int main(){    cout << "一周总共有：" << DAY << "天" << endl;    const int month = 12;    cout << "一年有：" << month << "月" << endl;    system("pause");    return 0;}</code></pre><h3 id="4-1-c-标识符命名规则"><a href="#4-1-c-标识符命名规则" class="headerlink" title="4.1 c++标识符命名规则"></a><strong>4.1 c++标识符命名规则</strong></h3><ul><li><p>标识符不能是关键字</p></li><li><p>标识符<strong>只能</strong>由字母数字下划线组成</p></li><li><p>第一个字符<strong>必须</strong>为字母或下划线</p></li><li><p>标识符中字母区分大小写</p><p>==标识符要知名见意==</p></li></ul><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a><strong>二、数据类型</strong></h2><p>  存在意义：给变量分配一个合适的内存空间</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>-2^15 - 2^15-1</td></tr><tr><td>int(整型)</td><td>4字节</td><td>-2^31 - 2^31-1</td></tr><tr><td>long (长整型)</td><td>W_4;LIN_4;8</td><td>-2^31 - 2^15-1</td></tr><tr><td>long  long(长长整型)</td><td>8字节</td><td>-2^63 - 2^63-1</td></tr></tbody></table><ul><li>sizeof:统计数据类型所占内存大小<code>sizeof(数据类型 或 变量)</code></li></ul><h3 id="2-2-实型（浮点型）"><a href="#2-2-实型（浮点型）" class="headerlink" title="2.2 实型（浮点型）"></a><strong>2.2 实型（浮点型）</strong></h3><ul><li><p>单精度  float  4字节     7位有效      ；双精度  double  8字节    15-16</p></li><li><p>c++中默认输出6位有效数字</p></li><li><p>科学计数法：</p><pre class=" language-c++"><code class="language-c++">float f2 = 3e2;//3*10^2    cout << f2 << endl;//结果为300    float f3 = 3e-2;//3*0.1^2;    cout << f3 << endl;//结果为0.03    </code></pre><h3 id="2-3-字符型"><a href="#2-3-字符型" class="headerlink" title="2.3 字符型"></a><strong>2.3 字符型</strong></h3><p><code>char ch ='a' </code>用于显示单个字符</p><p><strong>注意：显示字符变量时，用单引号将字符括起来，不要用双引号</strong></p><p><strong>单引号只能有一个字符，不可以是字符串</strong></p><ul><li><p>c/c++中字符变量只占==一个字节==</p></li><li><p>字符型变量不是把字符本身放在内存中存储，而是将ASSCLL编码放入存储单元</p></li><li><p>字符型变量的创建方式</p></li><li><p>字符型变量对应ASCII编码</p><pre class=" language-c++"><code class="language-c++">//字符型变量对应的ASCII编码    cout << (int)ch << endl;//字符型强转成整型a---97A---65</code></pre></li></ul></li></ul><h3 id="2-4-转义字符"><a href="#2-4-转义字符" class="headerlink" title="2.4 转义字符"></a><strong>2.4 转义字符</strong></h3><ul><li>\n :换行    \t:水平制表（跳到下一个tab）  \：代表一个反斜线（可以输出更整齐）</li></ul><h3 id="2-5-字符串型"><a href="#2-5-字符串型" class="headerlink" title="2.5 字符串型"></a><strong>2.5 字符串型</strong></h3><pre class=" language-c++"><code class="language-c++">1、c语言字符串    //注意事项：  char  字符串名 []    //注意事项2：等号后面用双引号包含起来字符串    char str[] = "hello";    cout << str << endl;2、C++风格    //要包含一个头文件 #include<string>    string str2 = "hello";    cout << str2 << endl;</code></pre><h3 id="2-6-布尔类型bool"><a href="#2-6-布尔类型bool" class="headerlink" title="2.6 布尔类型bool"></a><strong>2.6 布尔类型bool</strong></h3><p>  <strong>代表真或假的值</strong></p><ul><li>有两个值  true–真（本质是1）   false–假（本质是0）</li><li>占一个字节大小</li></ul><pre class=" language-c++"><code class="language-c++">  //1、创建bool数据类型      bool flag = true;//true代表真 1      cout << flag << endl;      flag = false;//false代表假 0      cout << flag << endl;  //2、查看其内存空间      cout << "bool类型所占的内存空间：" << sizeof(flag) << endl;</code></pre><h3 id="2-7-数据的输入"><a href="#2-7-数据的输入" class="headerlink" title="2.7 数据的输入"></a><strong>2.7 数据的输入</strong></h3><p>  <strong>用于从键盘获取数据</strong>     <code>cin &gt;&gt; 变量</code></p><pre class=" language-c++"><code class="language-c++">1、整型    int a = 0;    cout << "请给整型变量a赋值：" << endl;    cin >> a;    cout << "整型输出a=" << a << endl;2、浮点型    float f = 3.14f;    cout << "请给浮点型型变量a赋值：" << endl;    cin >> f;    cout << "浮点型f输出f=" << f << endl;3、字符型    char ch = 'a';    cout << "请给字符型型变量a赋值：" << endl;    cin >> ch;    cout << "字符型ch输出f=" << ch << endl;4、字符串型    string str = "hello";    cout << "请给字符串型变量str赋值：" << endl;    cin >> str;    cout << "字符串型输出str=" << str << endl;4、布尔类型    bool flag = 0.5;    cout<< "bool flag = " << flag << endl;    cerr << "请给bool类型赋值" << endl;    cin >> flag;    cerr << "bool flag = " << flag << endl;</code></pre><ul><li><p>算数运算符</p><table><thead><tr><th align="center">运算符</th><th align="center">术语</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">/</td><td align="center">除</td><td align="center">10/5</td><td align="center">2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">10%3;10%20</td><td align="center">1;10</td></tr><tr><td align="center">++</td><td align="center">前置递增</td><td align="center">a=2;b=++a</td><td align="center">a=3;b=3</td></tr><tr><td align="center">++</td><td align="center">后置递增</td><td align="center">a=2;b=a++</td><td align="center">a=3;b=2</td></tr><tr><td align="center">–</td><td align="center">前置递减</td><td align="center">a=2;b=–a</td><td align="center">a=1;b=1</td></tr><tr><td align="center">–</td><td align="center">后置递减</td><td align="center">a=2;b=a–</td><td align="center">a=1;b=2</td></tr></tbody></table><p><strong>两个小数不能做取模运算</strong>；<strong>只有整型变量才可以取模</strong></p></li><li><p>赋值运算符</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+=</td><td>加等于</td><td>a=0;a+=2//a=a+2</td><td>a=2</td></tr><tr><td>-=</td><td>减等于</td><td>a=5;a-=3//a=a-3</td><td>a=2</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2;a*=2…</td><td>a=4</td></tr><tr><td>/=</td><td>除等于</td><td>a=4;a/=2…</td><td>a=2</td></tr><tr><td>%=</td><td>模等于</td><td>a=3;a%=2…</td><td>a=1</td></tr></tbody></table></li><li><p>逻辑运算符</p><table><thead><tr><th align="center">运算符</th><th align="center">术语</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">！</td><td align="center">非</td><td align="center">!a</td><td align="center">…</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">与</td><td align="center">a&amp;&amp;b</td><td align="center">同真则真，一假则假</td></tr><tr><td align="center">||</td><td align="center">或</td><td align="center">a||b</td><td align="center">一真即真，同假为假</td></tr></tbody></table><p><strong>c++中除了0都为真</strong></p><h2 id="三、程序流程结构（顺序、选择、循环）"><a href="#三、程序流程结构（顺序、选择、循环）" class="headerlink" title="三、程序流程结构（顺序、选择、循环）"></a>三、程序流程结构（顺序、选择、循环）</h2></li></ul><h3 id="3-1选择结构："><a href="#3-1选择结构：" class="headerlink" title="3.1选择结构："></a>3.1选择结构：</h3><h4 id="3-1-1-单行格式if语句"><a href="#3-1-1-单行格式if语句" class="headerlink" title="3.1.1 单行格式if语句"></a>3.1.1 单行格式if语句</h4><pre class=" language-c++"><code class="language-c++">`if(条件){条件满足执行的语句}`**后面不要加分号**```c++//选择结构  单行if语句    //用户输入分数，如果分数大于100，屏幕输出    //1、用户输入分数    int score = 0;    cout << "请输入一个分数" << endl;    cin >> score;    //2、打印    cout << "分数为：" << score << endl;    //3、判断分数是否大于600，如果大于则输出    if (score > 600)    {        cout << "恭喜你" << endl;    }```</code></pre><h4 id="3-1-2-多行格式if语句"><a href="#3-1-2-多行格式if语句" class="headerlink" title="3.1.2 多行格式if语句"></a>3.1.2 多行格式if语句</h4><pre class=" language-c++"><code class="language-c++"> ：`if(条件）{条件满足执行的语句}else{条件不满足执行的语句}````c++//选择结构  多行if语句    //用户输入分数，如果分数大于100，屏幕输出    //1、用户输入分数    int score = 0;    cout << "请输入一个分数" << endl;    cin >> score;    //2、打印    cout << "分数为：" << score << endl;    //3、判断分数是否大于600，如果大于则输出    if (score > 600)    {        cout << "恭喜你" << endl;    }    else    {        cout << "加油，别放弃" << endl;    }```</code></pre><h4 id="3-1-3-多条件的if语句"><a href="#3-1-3-多条件的if语句" class="headerlink" title="3.1.3 多条件的if语句"></a>3.1.3 多条件的if语句</h4><pre class=" language-c++"><code class="language-c++"> `if（条件1）{满足条件1执行} else if(条件2）{满足条件2执行}....else {条件不满足执行}````c++//选择结构  多条件if语句    //用户输入分数，如果分数大于600，输出A;    //如果分数大于500小于600，输出B;    //如果分数大于400小于500，输出C;    //1、用户输入分数    int score = 0;    cout << "请输入一个分数" << endl;    cin >> score;    //2、打印    cout << "分数为：" << score << endl;    //3、判断分数是否大于600，如果大于则输出    if (score > 600)    {        cout << "恭喜你:A" << endl;    }    else if (500<score)    {        cout << "恭喜你：B" << endl;    }    else if (400 < score )    {        cout << "恭喜你：C" << endl;    }    else    {        cout << "加油，别放弃" << endl;    }```</code></pre><h4 id="3-1-4-嵌套if"><a href="#3-1-4-嵌套if" class="headerlink" title="3.1.4 嵌套if"></a>3.1.4 嵌套if</h4><pre class=" language-c++"><code class="language-c++">```c++/*    -输入一个分数，根据分数判断    -分数大于600视为A，大于500视为B，大于400视为C，其余视为D    -在A中，大于650分A+,大于700分，视为A++    */    int score = 0;    cout << "请输入你的分数：" << endl;    cin >> score;    cout << "输入的分数为：" << score << endl;    if (score>600)    {        cout << "恭喜你：A" << endl;        if (score>700)        {            cout << "太棒了：A+++"<< endl;        }        else if (score>650)        {            cout << "很棒：A++"<< endl;        }        else        {            cout << "A+" << endl;        }    }    else if (score>500)    {        cout << "恭喜你：B"<< endl;    }    else if (score>400)    {        cout << "恭喜你:C" << endl;    }    else    {        cout << "别放弃，加油" << endl;    }```</code></pre><h4 id="小作业：三只小猪称体重"><a href="#小作业：三只小猪称体重" class="headerlink" title="小作业：三只小猪称体重"></a>小作业：三只小猪称体重</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    //三只小猪称体重，判断哪只最重    //1、创建三只小猪    int num1 = 0;    int num2 = 0;    int num3 = 0;    //2、输入三只小猪的重量    cout << "请输入小猪A的重量" << endl;    cin >> num1;    cout << "请输入小猪B的重量" << endl;    cin >> num2;    cout << "请输入小猪C的重量" << endl;    cin >> num3;    cout << "小猪A的体重为：" << num1 << endl;    cout << "小猪B的体重为：" << num2 << endl;    cout << "小猪C的体重为：" << num3 << endl;    //3、进行比较    //先判断A和B    if (num1>num2)    {        if (num1 > num3)        {            cout << "小猪A最重" << endl;        }        else        {            cout << "小猪C最重" << endl;        }    }    else    {        if (num2 > num3)        {            cout << "小猪B最重" << endl;        }        else        {            cout << "小猪C最重" << endl;        }    }    system("pause");    return 0;}</code></pre><h4 id="3-1-5-三目运算符"><a href="#3-1-5-三目运算符" class="headerlink" title="3.1.5 三目运算符"></a>3.1.5 三目运算符</h4><p>  通过三目运算符实现简答判断:<code>表达式1 ?表达式2 : 表达式3</code></p><p>  <strong>如果表达式1为真,执行2,并返回2的值;否则执行3,并返回3的值</strong></p><pre class=" language-c++"><code class="language-c++">//三目运算符    //创建a,b,c    //a和b做比较，将最大的变量赋给c    int a = 8;    int b = 6;    int c = 12;    c = (a > b ? a : b);    cout << c << endl;    //c++中三目运算符返回的是变量，可以继续赋值    (a > b ? a : b) = 100;    cout << "a=" << a << endl;    cout << "b=" << b << endl;</code></pre><h4 id="3-1-6-switch语句"><a href="#3-1-6-switch语句" class="headerlink" title="3.1.6 switch语句"></a>3.1.6 switch语句</h4><p>  执行多条件分支语句</p><pre class=" language-c++"><code class="language-c++">switch(表达式){        case 结果1：执行语句;break;        case 结果1：执行语句;break;                ...        default:执行语句；break;}</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;int main(){    //switch语句    //给一个电影打分    //10 ~9  经典    //8 - 7 非常好    //6 - 5 一般    //5以下   烂片    //1、提示用户给电影评分    cout << "请给电影打分" << endl;    //2、用户开始打分    int score = 0;    cin >> score;    cout << "你输入的分数为：" << score << endl;    //3、根据用户输入的分数提示用户最后的结果    switch (score)    {    case 10:        cout << "经典电影" << endl;        break;//退出当前分支    case 9:        cout << "经典电影" << endl;        break;//退出当前分支    case 8:        cout << "非常好电影" << endl;        break;//退出当前分支    case 7:        cout << "非常好电影" << endl;        break;    default:        cout << "烂片" << endl;        break;    }    system("pause");    return 0;}</code></pre><p>  ==注1==：case里如果没有break,那么程序会一直执行</p><p>  ==if    switch   区别？：==</p><p>  //switch缺点，判断只能说是整型或者字符型，不可一是一个区间</p><p>  //switch优点，结构很清晰，执行效率高</p><p>###3.2 循环结构</p><p>####3.2.1 while循环</p><ul><li><p>只要循环为真，就执行循环语句<code>while(循环条件){循环语句}</code></p></li><li><p>写循环时避免死循环</p></li><li><p>添加随机数种子  避免随机数重复<br>==srand((unsigned int)time(NULL));且添加头文件====#include<ctime>==</ctime></p></li><li><p>==break;//可用改关键字退出循环==</p></li><li><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;#include<ctime>//时间头文件包int main(){    //添加随机数种子  避免随机数重复    srand((unsigned int)time(NULL));    //1、系统生成随机数    int num = rand() % 100 + 1;   // 生成0-99的随机数    生成1-100    //cout << num << endl;        //2、玩家进行猜测    int val = 0;//玩家输入的数据    while (1)    {        cin >> val;        //3、判断玩家的猜测        if (val > num)        {            cout << "猜大了" << endl;        }        else if (val < num)        {            cout << "猜小了" << endl;        }        else        {            cout << "猜对了" << endl;            break;//可用改关键字退出循环        }    }    //猜对，退出游戏    //猜错，提示猜的结果，过大或过小，重新返回第二步    system("pause");    return 0;}</code></pre><h4 id="3-2-2-do…while循环语句"><a href="#3-2-2-do…while循环语句" class="headerlink" title="3.2.2 do…while循环语句"></a>3.2.2 do…while循环语句</h4></li></ul><p><code>do{循环语句} while(循环条件)；先执行语句，再判断条件</code></p><ul><li>do…while和while的区别是do…while会先执行一次循环</li></ul><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;#include<ctime>//时间头文件包int main(){        int num = 0;    do    {        cout << num << endl;        num++;    } while (num < 10);    system("pause");    return 0;}        </code></pre><h4 id="案例：水仙花数"><a href="#案例：水仙花数" class="headerlink" title="案例：水仙花数"></a>案例：水仙花数</h4><ul><li><p>水仙花束数是一个三位数，它的每个位上的数字的3次幂之和为它本身，如1^3 + 2^3 + 3^3 = 153</p><p>用do….while语句，求出所有3位数中的水仙花数</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;#include<ctime>//时间头文件包int main(){    /*    1、将所有的三位数进行输出（100-999）；    2、找出三位数中所有的水仙花数    水仙花                153    获取个位            153%10=3          对数字取模于10可以获取到个位    获取十位            153/10=15         15%10=5    先整除于10，得到两位数，再取余得到个位数    获取百位            153/100=1         直接整除于100，获取百位    判断      个位^3 +十位^3 + 百位^3  =  自己    */    int num = 100;    do    {        int a = 0;//个        int b = 0;//十        int c = 0;//百        a = num % 10;        b = num / 10 % 10;        c = num / 100;        if (a*a*a+b*b*b+c*c*c ==num)        {            cout << num << endl;        }                num++;    } while (num < 1000);        system("pause");    return 0;}</code></pre></li></ul><h4 id="3-2-3-for循环"><a href="#3-2-3-for循环" class="headerlink" title="3.2.3 for循环"></a>3.2.3 for循环</h4><p>满足循环条件，执行循环语句：<code>for(起始表达式；条件表达式；末尾循环体){循环语句；}</code></p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    //for  循环    //从0^9    //第一种    for (int i = 0; i < 10; i++)    {        cout << i << endl;    }    //第二种    int i = 0;    for ( ; ;)    {        if (i>=10)        {            break;        }        cout << i << endl;        i++;    }    system("pause");    return 0;}</code></pre><ul><li>for循环中表达式，要用分号进行分隔</li><li>while,do…while,for都是开发中常用的循环，for较为清晰</li></ul><h4 id="小作业：敲桌子"><a href="#小作业：敲桌子" class="headerlink" title="小作业：敲桌子"></a>小作业：敲桌子</h4><p>从1开始数到数字100，如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    for (int i = 1; i <= 100; i++)    {        int a = 0;        int b = 0;        int c = 0;        a = i % 10;        b = i / 10;        c = i % 7;        if (a == 7 || b == 7 || c == 0)        {            cout << "敲桌子" << endl;        }        else        {            cout << i << endl;        }            }        system("pause");    return 0;} </code></pre><h4 id="3-2-4-嵌套循环"><a href="#3-2-4-嵌套循环" class="headerlink" title="3.2.4 嵌套循环"></a>3.2.4 嵌套循环</h4><p>在循环体中再嵌套一层循环，解决实际问题</p><p><strong>输出星图</strong>：</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    //利用嵌套循环实现星图    //打印一行星图    //i就近原则    //外层执行一次，内层执行一周    //外层循环    for (int i = 0; i < 10; i++)    {        //内层循环        for (int j = 0; j < 10; j++)        {            cout << "* ";        }        cout << endl;    }    system("pause");    return 0;} </code></pre><h4 id="嵌套循环案例：乘法口诀表"><a href="#嵌套循环案例：乘法口诀表" class="headerlink" title="嵌套循环案例：乘法口诀表"></a>嵌套循环案例：乘法口诀表</h4><img src="/2021/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/1.png" class=""><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    ///乘法口诀表    //打印行数    for (int i = 1; i < 10; i++)    {        //cout << i << endl;        for (int j = 1; j <= i; j++)//列数的表示方法        {            cout << j<<"*"<<i<<"="<<j*i<<"  ";//行数的表示方法                    }        cout << endl;    }    system("pause");    return 0;} </code></pre><h3 id="3-3-跳转语句"><a href="#3-3-跳转语句" class="headerlink" title="3.3 跳转语句"></a>3.3 跳转语句</h3><h4 id="3-3-1-break语句"><a href="#3-3-1-break语句" class="headerlink" title="3.3.1 break语句"></a>3.3.1 break语句</h4><p>==用于跳出选择结构或者循环结构==</p><p>使用时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在嵌套语句中，作用是跳出当前循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    //break的使用时机    //1、出现在switch    /*cout << "请选择副本难度"<<endl;    cout << "1、普通"<<endl;    cout << "2、中的"<<endl;    cout << "3、困难"<<endl;    int seclet = 0;    cin >> seclet;    switch (seclet)    {    case 1:        cout << "普通" << endl;        break;    case 2:        cout << "中等" << endl;        break;    case 3:        cout << "困难" << endl;        break;    default:        break;    }*/    //2、出现在循环语句    //for (int i = 0; i < 10; i++)    //{    //    //如果i等于5，退出循环，不再打印    //    if (i==5)    //    {    //        break;//退出循环    //    }    //    cout << i << endl;    //}    //3、出现在嵌套循环中    for (size_t i = 0; i < 10; i++)    {        for (int j = 0; j < 10; j++)        {            if (j==5)            {                break;//退出内层循环            }            cout << "* ";        }        cout << endl;            }    system("pause");    return 0;} </code></pre><h4 id="3-2-2-continue-语句"><a href="#3-2-2-continue-语句" class="headerlink" title="3.2.2 continue 语句"></a>3.2.2 continue 语句</h4><p>在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一层循环</p><p><strong>与break的区别</strong>：</p><p>==continue执行到本行就不再执行后面了，然后再一次循环==</p><p>==break直接是跳出循环了==</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    //continue语句    for (int i = 1; i <= 100; i++)    {        //如果是基数输出，偶数不输出        if (i%2==0)        {            continue;//偶数这些数就不再往下输出了                     //要与continue区分一下                     //可以筛选条件，执行到此就不再向下执行了                    //break直接退出了            }        cout << i << endl;    }        system("pause");    return 0;} </code></pre><p><strong>continue并不会使整个循环终止，而break会跳出循环</strong></p><h4 id="3-2-3-goto语句"><a href="#3-2-3-goto语句" class="headerlink" title="3.2.3 goto语句"></a>3.2.3 goto语句</h4><p>可以无条件跳转语句：<code>goto 标记；</code></p><p><strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</strong></p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    //goto语句；    cout << "1、***" << endl;    cout << "2、***" << endl;    goto flag;    cout << "3、***" << endl;    cout << "4、***" << endl;    flag:    cout << "5、***" << endl;    system("pause");    return 0;}</code></pre><h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><p>数组就是一个存放了相同类型数据元素的一个集合</p><ul><li>==数组中的每个数据元素都是相同的数据类型==</li><li>==数组是由连续的内存位置组成的==</li></ul><h3 id="4-1-一维数组"><a href="#4-1-一维数组" class="headerlink" title="4.1 一维数组"></a>4.1 一维数组</h3><h4 id="4-1-1-一维数组的定义三种方式"><a href="#4-1-1-一维数组的定义三种方式" class="headerlink" title="4.1.1 一维数组的定义三种方式"></a>4.1.1 一维数组的定义三种方式</h4><ul><li><p>1.<code>数据类型   数组名[数组长度]；</code></p></li><li><p>2.<code>数据类型   数组名[数组长度] = {值1,2,3...}</code></p></li><li><p>3.<code>数据类型   数组名[ ] ={值1,2,3...}</code></p></li><li><p>初始化数据的时候，没有全部填写完，会用0来填补剩余数据</p></li><li><p>定义数组的时候，必须有一个初始的长度</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    /*+1.`数据类型   数组名[数组长度]；`        + 2.`数据类型   数组名[数组长度] = { 值1,2,3... }`    + 3.`数据类型   数组名[] = { 值1,2,3... }`*/    //+1.`数据类型   数组名[数组长度]；`    /*int arr[5];    arr[0] = 10;    arr[1] = 10;    arr[2] = 10;    arr[3] = 10;    arr[4] = 10;    cout << arr[0] << endl;*/    //利用循环，输出数组中的元素    /*int arr[5] = { 1,2,3,4,5 };    for ( int i = 0; i < 5; i++)    {        cout << arr[i] << endl;    }*/    //数据类型   数组名[] = { 值1,2,3... }    int arr2[] = { 1,2,3,4,5,6 };    for (int i = 0; i < 6; i++)    {        cout << arr2[i] << endl;    }    system("pause");    return 0;}</code></pre><h4 id="4-1-2-一维数组数组名"><a href="#4-1-2-一维数组数组名" class="headerlink" title="4.1.2 一维数组数组名"></a>4.1.2 一维数组数组名</h4><ul><li><p>可以统计真个数组在内存中的长度 sizeof(arr)</p></li><li><p>可以获取数组在内存中的首地址  </p></li><li><p>数组名是一个常量，不可以进行赋值操作</p></li><li><p>数组名arr = 首地址 = 第一个元素的地址&amp;arr[0]</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>int main(){    //1、可以统计真个数组在内存中的长度  所占内存大小    int arr[] = { 1,2,3 };    cout << "整个数组所占的内存空间为："<<sizeof(arr) << endl;//一个整型是4个字节    cout << "每个所占大小" << arr[0] << endl;    cout << "数组中的元素个数为：" << sizeof(arr) / sizeof(arr[0]) << endl;    //2、可通过数组名查看数组的首地址    cout << "数组的首地址为：" << (int)arr << endl;//转换成了10进制    for (int i = 0; i < 3; i++)    {        cout << "数组中第" << i << "个元素的地址为：" << (int)&arr[i] << endl;    }    //数组名是一个常量，不可以进行赋值操作    system("pause");    return 0;}</code></pre></li></ul></li></ul><h4 id="案例1：五只小猪称体重"><a href="#案例1：五只小猪称体重" class="headerlink" title="案例1：五只小猪称体重"></a>案例1：五只小猪称体重</h4><pre><code>在一个数组中记录了5只小猪的体重，如 int arr[]={300,350,200,400,250}找出并打印最重的小猪的体重```c++#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main(){    //1、创建5只小猪    int arr[5] = { 300,350,200,400,250 };    //2、从数组中找出最大值    int max = 0;    for (int i = 0; i &lt; 5; i++)    {        if (max &lt; arr[i])        {            max = arr[i];        }            }    //打印最大值    cout &lt;&lt; "最重的小猪体重为："&lt;&lt;max&lt;&lt; endl;    system("pause");    return 0;}```</code></pre><h4 id="案例2：数组元素逆置"><a href="#案例2：数组元素逆置" class="headerlink" title="案例2：数组元素逆置"></a>案例2：数组元素逆置</h4><p>声明一个5个元素的数组，并将元素逆置</p><img src="/2021/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/2.png" class=""><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;int main(){    //int start = 0;起始元素下标    //int end = sizeof(arr)/sizeof(arr[0])-1  //末尾元素下标    //法1    //int arr[] = { 4,2,5,3,10};    //    //for (int i = 4; i >=0 ; i--)    //{    //    cout << arr[i] << endl;    //}    //法2    int arr[] = { 4,2,5,3,10 };    for (int i = 0; i < 5; i++)    {        cout << arr[i] << endl;    }    //1 记录起始下标的位置    //2 记录结束下标的位置    //3 起始下标与结束下标元素互换    //4 起始位置++   结束位置--    //5 循环执行1，直到起始位置大于等于结束位置    int start = 0;    int end = sizeof(arr) / sizeof(arr[0]) - 1;    while (start<end)    {    int temp = arr[start];    arr[start] = arr[end];    arr[end] = temp;    //下标更新    start++;    end--;    }    cout << "逆置后的元素为：" << endl;    for (int i = 0; i < 5; i++)    {        cout << arr[i] << endl;    }    system("pause");    return 0;}</code></pre><h4 id="4-1-2-冒泡排序"><a href="#4-1-2-冒泡排序" class="headerlink" title="4.1.2 冒泡排序"></a>4.1.2 冒泡排序</h4><ul><li>比较相邻的元素，如果第一个 比第二个大，就交换</li><li>对每一对相邻元素做相同的工作，执行完毕后，找到一个最大值</li><li>重复以上的步骤，每次次数-1，直到不需要比较</li><li>排序总轮数 = 元素个数 - 1</li><li>每轮对比次数 = 元素个数 - 排序轮数 - 1</li></ul><img src="/2021/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/3.png" class=""><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;int main(){    //利用冒泡排序实现升序序列    int arr[] = { 1,0,6,3,5,2,10,7,8 };    cout << "排序前：" << endl;    for (int i = 0; i < 9; i++)    {        cout << arr[i] << " ";    }    cout << endl;    //开始冒泡排序    //总共排序的轮数为 元素个数-1    for (int i = 0; i < 9-1; i++)    {        //内层循环对比  每轮对比次数=元素个数-当前排序轮数-1        for (int  j = 0; j < 9-i-1; j++)        {            //如果第一个数字比第二个数字大，交换两个数字            if (arr[j] > arr[j + 1])            {                int temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            }        }    }    //打印排序后    cout << "排序后：" << endl;    for (int i = 0; i < 9; i++)    {        cout << arr[i] << " ";    }    system("pause");    return 0;}</code></pre><h3 id="4-2-二维数组"><a href="#4-2-二维数组" class="headerlink" title="4.2 二维数组"></a>4.2 二维数组</h3><p>在一维数组上，多加一个维度</p><h4 id="4-2-1二维数组的定义方式"><a href="#4-2-1二维数组的定义方式" class="headerlink" title="4.2.1二维数组的定义方式"></a>4.2.1二维数组的定义方式</h4><ul><li><p><code>数据类型     数组名[行数] [列数];</code></p></li><li><p><code>数据类型     数组名[行数] [列数] = {{数据1，数据2},{数据3，数据4}，...};`+ `数据类型     数组名[行数] [列数] ={数据1，数据2，数据3，数据4}；`+ `数据类型     数组名[ ] [列数] ={数据1，数据2，数据3，数据4}`+ ==第二种更加直观，提高代码的可读性==+ **定义的时候，可以省略行数 ，但是不可以省略列数**#### 4.2.2 二维数组名称+ 查看二维数组所占内存空间+ 获取二维数组首地址+ ==二维数组的首地址arr  ==  第一行的首地址arr[0] ==第一行的第一个元素&amp;arr[0] [0]==```c++  #include<iostream>  using namespace std;    int main()  {  //二维数组名称用途    //1、可以查看内存空间大小  int arr[2][3] =   {  {1,2,3},  {4,5,6}  };  cout &lt;&lt; "内存空间大小为" &lt;&lt; sizeof(arr) &lt;&lt; endl;  cout &lt;&lt; "二维数组的第一行所占内存空间为：" &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;  cout &lt;&lt; "二维数组的第一个元素所占内存空间为：" &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;  cout &lt;&lt; "二维数组一共有" &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; "行" &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; "列" &lt;&lt; endl;  //2、可以查看二维数组的首地址  cout &lt;&lt; "二维数组的首地址为：" &lt;&lt; (int)arr &lt;&lt; endl;  cout &lt;&lt; "二维数组第一行的首地址为：" &lt;&lt; (int)arr[0] &lt;&lt; endl;  cout &lt;&lt; "二维数组第一行中第一个元素的首地址为：" &lt;&lt; (int)&amp;arr[0][0] &lt;&lt; endl;  cout &lt;&lt; "二维数组第二行的首地址为：" &lt;&lt; (int)arr[1] &lt;&lt; endl;  system("pause");  return 0;  }```#### 案例：考试成绩统计有三名同学（张三、李四、王五），在一次考试中的成绩分别如下表，请分别输出三名同学的总成绩|      | 语文 | 数学 | 英语 || ---- | ---- | ---- | ---- || 张三 | 100  | 100  | 100  || 李四 | 90   | 50   | 100  || 王五 | 60   | 70   | 80   |```c++#include<iostream>using namespace std;#include<string>int main(){//1、创建二维数组，3行3列//2、统计考试成绩，让每行的三列相加int arr[3][3] = {{100,100,100},{90,50,100},{60,70,80}};string names[3] = { "张三","李四","王五" };for (int i = 0; i &lt; 3; i++){int sum = 0;//统计分数综合for (int j = 0; j &lt; 3;j++ ){sum += arr[i][j];}cout &lt;&lt; names[i] &lt;&lt; "的总分为：" &lt;&lt; sum ;cout &lt;&lt; endl;}system("pause");return 0;}```## 五、函数将一段经常使用的代码封装起来，减少重复代码，一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能### 5.1 函数的定义函数的定义一般有5个步骤：+ 返回值类型:一个函数可以返回一个值+ 函数名：给函数起个名字+ 参数列表：使用函数时，传入的数据+ 函数体语句：花括号内的代码，函数内需要执行的语句+ return 表达式：和返回值类型挂钩，函数执行完后，返回相应的数据```c++返回值类型  函数名（参数列表）{函数体语句return表达式}```**实现一个加法函数，功能为传入两个整型数据，计算数据相加的结果，并且返回**1、返回值类型                     int2、函数名                            add3、参数列表(==形参==)       （int num1,int num2）4、函数体语句             int sum = num1+num25、return 表达式            return  sum;```c++//加法函数，实现两个整型相加，并将结果进行返回//返回值类型；函数名；参数列表；函数体语句；return表达式int add(int num1, int num2){int sum = num1 + num2;return sum;}```### 5.2 函数的调用`函数名（参数）`+ 当调用函数的时候   实参传递给形参+ 函数定义里的小括号称为形参，函数调用时传入的参数称为实参### 5.3 值传递+ 值传递：指函数调用时实参将数值传入给形参+ ==值传递时，如果形参发生变化，并不会影响实参==### 5.4 函数的常见样式+ 无参无返+ 有参无返+ 无参有返+ 有参有返```c++#include<iostream>using namespace std;#include<string>//函数产检样式//+ 无参无返void test01(){cout &lt;&lt; "这是第一个例子" &lt;&lt; endl;}//+ 有参无返void test02(int a){cout &lt;&lt; "这是第二个案例：" &lt;&lt; a &lt;&lt; endl;}//+ 无参有返int test03(){cout &lt;&lt; "这是第三个程序" &lt;&lt; endl;return 1000;}//+ 有参有返int test04(int a){cout &lt;&lt; "这个是04：" &lt;&lt; a &lt;&lt; endl;return a;}int main(){//1函数调用test01();//2函数调用test02(100);//3函数调用int c = test03();cout &lt;&lt; "C=:" &lt;&lt; c &lt;&lt; endl;//函数调用test04(10);system("pause");return 0;}```### 5.5 函数的声明告诉编译器函数名称及如何调用函数，函数的实际主体可单独定义+ ==函数的声明可以多次，但函数的定义只有一次==+ ==自定义函数在主函数之后时需要声明==+ ==函数声明方式：int   max(int a,int b);==### 5.6 函数的分文件编写让代码结构更加清晰，函数分文件编写一般有4个步骤+ 创建后缀名为.h的头文件+ 创建后缀名为.cpp的源文件+ 在头文件中写函数的声明     `#include<iostream>、using namespace std;也要写上去 +函数声明`+ 在源文件中写函数的定义  为了与头文件配套，写一个自定义头文件，如：`#include "swap.h"`+ 在主文件中添加上创建的自定义头文件,如`#include"swap.h"`## 六、指针**作用：可以通过指针间接访问内存**+ 内存编号是从0开始记录的，一般用十六进制数字表示+ 可以利用指针变量保存地址### 6.1 指针变量的定义和使用  语法 :  `数据类型 * 变量名；`+ 可以使用指针来保存一个地址；简单来说，指针就是一个地址+ 通过p找到a的内存，通过*p(解引用)修改a的内存  ```c++  #include<iostream>  using namespace std;      int main()  {   int a = 10;  //1、定义指针  //指针定义的语法  数据类型 * 指针变量  int * p;  //让指针记录变量a的地址  p = &amp;a;  cout &lt;&lt; "指针p为：" &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; "a的地址为：" &lt;&lt; &amp;a &lt;&lt; endl;    //2、使用指针  //可以通过解引用的方式来找到指针指向的内存  //指针前 + *代表解引用，找到指针指向的内存中的数据  *p = 1000;//通过p找到a的内存，通过*p修改a的内存  cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;  cout &lt;&lt; "*p = " &lt;&lt; *p &lt;&lt; endl;      system("pause");  return 0;  }  ```### 6.2 指针所占内存空间**指针也是一种数据类型**    如   int*  就是一种数据类型  可将对象强转成指针类型+ 32位操作系统下，占用4个字节空间；64位下，占用8个字节空间（所有类型都是）+ 在32位操作系统下，指针占用4个字节空间大小，不管什么数据类型+ 在64位操作系统下，指针占用8个字节空间大小### 6.3 空指针和野指针**空指针**：指针变量指向内存中编号为0的空间**用途**：初始化指针变量**注意**：空指针指向的内存是不可访问的空指针：```c++#include<iostream>using namespace std;int main(){ //空指针//1、空指针用于给指针变量进行初始化int * p = NULL;//2、空指针是不可以进行访问的//0 - 255之间的内存编号是系统占用的，因此不可以访问 *p = 100;system("pause");return 0;}```野指针：指针变量指向非法的内存空间```c++int main(){ //野指针//在程序中，避免出现野指针int * p = (int *)0x1100;//没有权利操控的指针//访问野指针报错cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}```**空指针和野指针都不是我们申请的空间，因此不要访问**### 6.4 const 修饰指针const修饰指针的三种情况：+ const修饰指针  --- 常量指针  + const int *p = &amp;a  {% asset_img 4.png %}```c++int main(){ int a = 10;int b = 20;const int * p = &amp;a;//常量指针：指针的指向可以修改，但指针指向的值不可以修改cout &lt;&lt; "第一次p的地址为:" &lt;&lt; p &lt;&lt; endl;    //输出为1个地址cout &lt;&lt; "第一次p的值为：" &lt;&lt; *p &lt;&lt; endl;   //输出为10p = &amp;b;cout &lt;&lt; "第二次p的地址为:" &lt;&lt; p &lt;&lt; endl;    //输出为1个地址   地址改变了cout &lt;&lt; "第二次p的值为：" &lt;&lt; *p &lt;&lt; endl;    //输出20*p = 30;//报错，指针指向的值不能修改system("pause");return 0;}   总结：p为指针变量为1个地址   *p为解引用，为一个指针所指向内存空间的值```+ const修饰常量  ---  指针常量  + int * const p = &amp;a  + 指针的指向不可以修改，但指针指向的值可以修改{% asset_img 5.png %}+ const 即修饰指针，又修饰常量  + const int * const p = &amp;a;  + 指针的指向和指针指向的值都不可以修改{% asset_img 6.png %}==记忆方法==+ 名字：const(常量)  int * p(指针)对应着记+ 用途：const 后面跟 p   ----- 指针常量：指向(p)不能修改  ​const 后面跟 *p ----- 常量指针：指针指向的值( * p)不能被修改   ```c++int main(){ //2、const修饰常量 //指针常量//指针的指向不可以修改，指针指向的值可以修改int a = 10;int b = 20;int * const p = &amp;a;*p = 30;//正确//p = &amp;b;//错误,指针的指向不可以改//3、const 修饰指针和常量const int * const p2 = &amp;a;//*p2 = 100;//错误//p2 = &amp;b;//错误system("pause");return 0;}```### 6.5 指针和数组利用指针访问数组中的元素```c++#include<iostream>using namespace std;int main(){ //指针和数组//利用指针访问数组中的元素int arr[] = { 1,2,3,3,6,5,4,20,45,12 };cout &lt;&lt; "第一个元素为：" &lt;&lt; arr[0] &lt;&lt; endl;int * p = arr;cout &lt;&lt; "利用指针访问的第一个值为" &lt;&lt; *p &lt;&lt; endl;p++;//指针向后偏移4个字节cout &lt;&lt; "利用指针访问的第二个元素的值为" &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; "利用指针遍历数组" &lt;&lt; endl;for (int i = 0; i &lt; 10;i++){cout &lt;&lt; *p &lt;&lt; endl;p++;}system("pause");return 0;}```### 6.6 指针和函数利用指针做函数参数，可以修改实参的值```c++#include<iostream>using namespace std;void swap01(int a, int b){int temp = a;a = b;b = temp;cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b=" &lt;&lt; b &lt;&lt; endl;}void swap02(int *p1, int *p2){int temp = *p1;*p1 = *p2;*p2 = temp;cout &lt;&lt; "a=" &lt;&lt; *p1 &lt;&lt; endl;cout &lt;&lt; "b=" &lt;&lt; *p2 &lt;&lt; endl;}int main(){ //实现两个数字进行交换//指针和函数//1、值传递//值传递改变不了实参int a = 10;int b = 20;swap01(a,b);cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b=" &lt;&lt; b &lt;&lt; endl;//2、地址传递//地址传递可以修改实参swap02(&amp;a, &amp;b);cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b=" &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}```+ ==p表示指针，对应地址；*p对应解引用，对应指针指向的内存空间的值==+ ==需要改变实参用地址传递，不需要改变实参用值传递==### 6.7 指针、数组、函数案例**案例：**封装一个函数，利用冒泡排序，实现对整型数组的升序排序+ 为函数传递数组时，实际上传递的是指向数组首元素的指针，因此不能拷贝数组，所以无法以值传递的方式使用数组参数+ 之前通过地址传递改变单个数的值，现在通过头元素地址修改整个数组的值+ *的第一种用途是和数据类型组合来定义指针，第二种用途是解引用+ ==C++编译器把arr[j]这个表达式看做是*(arr+1);比如加1，增加的值等于指向类型占用的字节数，对应的地址就会做出调整，跟之前的P++一个道理==+ 指针做形参改变实参```c++#include<iostream>using namespace std;//冒泡排序//参数1  数组的首地址   参数2   数组长度void paixu(int *arr,int len)//数组可以理解为一组指针，编译器在编译时会把数组当做指针来看//*arr  可以换为 arr[]{for (int i = 0; i &lt; len-1; i++){for (int j = 0; j &lt; len-i-1; j++){if (arr[j]&gt;arr[j+1]){int temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}}//打印数组void printarray(int *arr,int len){for (int  i = 0; i &lt; len; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}}int main(){//1、创建一个数组int arr[11] = { 2, 3, 8, 5, 6, 4, 7, 10, 9, 4, 6 };//数组长度int len = sizeof(arr) / sizeof(arr[0]);//创建一个函数，实现冒泡paixu(arr, len);//3、打印排序后的数组printarray(arr, len);system("pause");return 0;}```## 七、结构体结构体属于用户自定义的数据类型，允许用户存储不同的数据类型### 7.1 结构体定义与使用语法：`struct 结构体名 {结构体成员列表 }；`通过结构体创建变量的方式有三种：+ struct   结构体名  变量名+ struct   结构体名  变量名 = {成员1值，成员2值...}+ 定义结构体时顺便创建变量==结构体创建时 struct 不可以省略====结构体定义的时候  struct可以省略====结构体变量利用操作符“.”访问成员==```c++#include<iostream>using namespace std;#include<string>//1、创建学生的数据类型：学生包括（姓名，年龄，分数）//自定义数据类型，一些类型集合组成的一个类型//语法  struct  类型名称{成员列表}struct student{//成员列表//姓名 string name;//年龄int age;//分数int score;}s3;//顺便创建结构体变量int main(){//2、通过学生类型创建具体学生//2.1 struct student s1 //struct关键字可以省略struct student s1;//给属性赋值，通过.访问结构体变量中的属性s1.name = "张三";s1.age = 24;s1.score = 150;cout &lt;&lt;"姓名："&lt;&lt; s1.name&lt;&lt;"年龄："&lt;<s1.age<<"分数："<<s1.score <<="" endl;="" 2.2="" struct="" student="" s2="{...}" "李四",24,150="" &#125;;="" cout="" "姓名："="" s2.name="" "年龄："="" s2.age="" "分数："="" s2.score="" 2.3="" 在定义结构体时顺便创建结构体变量="" s3.name="王五" ;="" s3.age="25;" s3.score="150;" system("pause");="" return="" 0;="" &#125;="" ```="" ###="" 7.2="" 结构体数组="" 将自定义的结构体放入数组中方便维护="" 语法：`struct="" 结构体名="" 数组名[元素个数]="{{}，{}，...{}}</code"><!--"姓名："<<--></s1.age<<"分数："<<s1.score></string></iostream></iostream></iostream></iostream></iostream></iostream></iostream></string></iostream></string></iostream></iostream></code></p></li></ul><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>//结构体数组//1、定义一个结构体struct student{    //姓名    string name;    //年龄    int age;    //分数    int score;};int main(){    //2、创建一个结构体数组    student stu[3] =     {        {"张三",18,100},        {"李四",18,100},        {"王五",18,100}    };    //3.给结构体数组中的元素赋值    stu[2].name = "许六";    stu[2].age = 25;    stu[2].score = 150;    //4.遍历结构体数组    for (int i = 0; i < 3; i++)    {        cout << " 姓名是：" << stu[i].name << " 年龄是：" << stu[i].age << " 分数是：" << stu[i].score << endl;    }    system("pause");    return 0;}</code></pre><h3 id="7-3-结构体指针"><a href="#7-3-结构体指针" class="headerlink" title="7.3 结构体指针"></a>7.3 结构体指针</h3><p>作用：通过指针访问结构体中的成员</p><p>==利用操作符 -&gt; 可通过结构体指针访问结构体属性==</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>//结构体指针//定义一个学生的结构体struct student{    string name;    int age;    int score;};int main(){    //创建学生的结构体变量    student s = { "张三",25,150 };    student * p = &s;    //通过指针指向结构体变量中的数据    //通过结构体指针访问结构体中的属性，用“->”    cout << " 姓名：" << p->name << " 年龄：" << p->age << " 分数：" << p->score << endl;    system("pause");    return 0;}</code></pre><h3 id="7-4-结构体嵌套结构体"><a href="#7-4-结构体嵌套结构体" class="headerlink" title="7.4 结构体嵌套结构体"></a>7.4 结构体嵌套结构体</h3><p>作用：结构体中的成员可以使另一个结构体作为成员来解决实际问题</p><p>如：每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><img src="/2021/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/05/11/c-xue-xi-1.0-chu-ji-bian-cheng/7.png" class=""><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>//定义一个学生的结构体struct student{    string name;    int age;    int score;};//定义一个老师的结构体struct teacher{    int id;    string name;    int age;    struct student stu;};int main(){    //结构体嵌套结构体    //创建老师的结构体    teacher t;    t.id = 1000;    t.name = "老张";    t.age = 40;    t.stu.name = "张三";    t.stu.age = 25;    t.stu.score = 150;        cout << " 老师的姓名为：" << t.name << " 工号：" << t.id << "年龄 ：" << t.age         <<" 老师辅导的学生的姓名："<<t.stu.name<<"学生的年龄："<<t.stu.age<<" 学生的成绩为："<<t.stu.score << endl;    system("pause");    return 0;}</code></pre><h3 id="7-5-结构体做函数参数"><a href="#7-5-结构体做函数参数" class="headerlink" title="7.5 结构体做函数参数"></a>7.5 结构体做函数参数</h3><p>作用：将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>//定义学生结构体struct student{    string name;    int age;    int score;};//打印学生信息//1、值传递void printf_s1(struct student c){    c.age = 100;//实参并未改变    cout << "子函数1中  名字：" << c.name << " 年龄：" << c.age << " 分数：" << c.score << endl;}//2、地址传递void printf_s2(struct student *p){    p->age = 50;//实参发生了改变    cout << "子函数2中  名字：" << p->name << " 年龄：" << p->age << " 分数：" << p->score << endl;}int main(){    //结构体做函数参数    //将学会说呢过传入到一个参数中，打印学生身上的所有信息    //创建一个结构体变量    student s = { "张三",24,150 };    student s2 = { "李四",24,150 };    printf_s1(s);    printf_s2(&s2);    cout << "main函数中打印的结果 姓名：" << s2.name << " 年龄：" << s2.age << " 成绩："<<s2.score << endl;    system("pause");    return 0;}</code></pre><p>==如果不想修改主函数中的数据，用值传递，反之用地址传递==</p><h3 id="7-6-结构体中const使用场景"><a href="#7-6-结构体中const使用场景" class="headerlink" title="7.6 结构体中const使用场景"></a>7.6 结构体中const使用场景</h3><p>作用：用const来防止误操作</p><p>==将函数中的形参改为指针后，可以减少内存空间，一个指针占4个内存，而且不会赋值新的副本出来==</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>//const的使用场景struct student{    string name;    int age;    int score;};//将函数中的形参改为指针后，可以减少内存空间，一个指针占4个内存//而且不会赋值新的副本出来void printf1(const student *s){    //值传递拷贝出很多数据   占用内存较大    //改为了地址传递    //s->age = 150;//加入const之后，一旦有修改的操作就会报错，可以防止我们的误操作    cout << "函数打印 姓名：" << s->name << " 年龄：" << s->age << " 成绩：" << s->score << endl;}int  main(){    //创建结构体变量    struct student s = { "张三",25,150 };    //通过函数来打印结构体变量的信息    printf1(&s);    system("pause");    return 0;}</code></pre><h3 id="7-7-结构体案例1"><a href="#7-7-结构体案例1" class="headerlink" title="7.7 结构体案例1"></a>7.7 结构体案例1</h3><p>老师和学生做毕设，一个老师带5个，共有3名老师：</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员，学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值，最终打印出老师的数据以及老师所带学生的数据。</p><ul><li>学会随机函数的使用方法</li><li>学会字符串拼接的方法</li><li><code>fuzhi(struct teacher t[],int len) t[]</code>可替换为<code>*t、*a</code></li><li>==结构体嵌套时，若一级为数组，函数形参也用数组形式，若一级为单个，则可用指针形式==</li><li>数组与指针都可互相取值</li><li></li></ul><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>#include<ctime>//时间头文件包using namespace std;//学生的结构体struct student{    string name;    int age;    int score;};//老师的结构体的定义struct teacher{    string name;    struct student stu[5];};//给老师和学生赋值的函数void fuzhi(struct teacher t[],int len){    string nameseed = "ABCDE";    //给老师开始赋值    for (int  i = 0; i < len; i++)    {        t[i].name = "teacher_";        t[i].name += nameseed[i];        //通过循环给每名老师所带的学生赋值        for (int j = 0; j < 5; j++)        {            t[i].stu[j].name = "student_";            t[i].stu[j].name += nameseed[j];            int random = rand() % 61+40;//0-60   40-100            t[i].stu[j].score = random;        }            }    }//打印所有信息void shuchu(struct teacher a[],int len){    for (int i = 0; i < len; i++)    {        cout << "老师姓名：" << a[i].name << endl;        for (int j = 0; j < 5; j++)        {            cout << "\t学生姓名：" << a[i].stu[j].name << "分数为：" << a[i].stu[j].score << endl;        }            }}int main(){    //添加随机数种子    srand((unsigned int)time(NULL));    //1.创建3名老师的数组    teacher t[3];    //2.通过函数给3名老师的信息复制，并给老师所带的学生的信息复制    int len = sizeof(t) / sizeof(t[0]);    fuzhi(t, len);    //3.打印所有老师及所带的学生的信息    shuchu(t, len);    system("pause");    return 0;}</code></pre><h3 id="7-8-结构体案例2"><a href="#7-8-结构体案例2" class="headerlink" title="7.8 结构体案例2"></a>7.8 结构体案例2</h3><p>设计一个英雄结构体，包括姓名，年龄，性别；创建结构体数组，数组中存放5名英雄。通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><pre class=" language-c++"><code class="language-c++">{"刘备"，23，"男"}，{"关羽"，22，"男"},{"张飞"，28，"男"},{"赵云"，21，"男"},{"貂蝉"，19，"女"},</code></pre><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;//1、设计英雄结构体struct hero{    string name;    int age;    string sex;};//3、对数组进行排序，按照年龄进行升序排序void mp(struct hero a[],int len){    for (int i = 0; i < len-1; i++)    {       for (int j = 0; j < len-i-1; j++)       {           //           if (a[j].age>a[j+1].age)           {               struct hero temp = a[j];               a[j] = a[j + 1];               a[j + 1] = temp;           }                  }           }    }//4、将排序后的英雄进行输出void shuchu(struct hero s[],int len){    for (int i = 0; i < len; i++)    {        cout << "姓名：" << s[i].name << " 年龄：" << s[i].age << " 性别：" << s[i].sex << endl;    }    }int main(){    //2、创建数组存放5名英雄        hero h[5] =        {            {"刘备", 23,             "男"},            {"关羽", 22,             "男"},            {"张飞", 28,             "男"},            {"赵云", 21,             "男"},            {"貂蝉", 19,             "女"},        };        mp(h, 5);        shuchu(h, 5);    system("pause");    return 0;}</code></pre><ul><li>结构体交换是可以整体交换的</li></ul><h2 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h2><p>通讯录是一个可以记录亲人、好友信息的工具，系统中需要实现的功能如下：</p><ul><li><p>添加联系人：像通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多纪录1000人</p></li><li><p>显示联系人：显示通讯录中所有联系人信息</p></li><li><p>删除联系人：按照姓名进行删除指定联系人</p></li><li><p>查找联系人：按照姓名查看指定联系人信息</p></li><li><p>修改联系人：按照姓名重新修改指定联系人</p></li><li><p>清空联系人：情况通讯录中所有信息</p></li><li><p>退出通讯录：推出当前使用的通讯录</p></li></ul><h3 id="1、菜单功能"><a href="#1、菜单功能" class="headerlink" title="1、菜单功能"></a>1、菜单功能</h3><ul><li>封装函数显示该界面，如<code>void showMenu()</code></li><li>在main函数中调用封装好的函数</li></ul><pre class=" language-c++"><code class="language-c++">void showMenu(){    cout << "**************************" << endl;    cout << "*****  1、添加联系人  *****" << endl;    cout << "*****  2、显示联系人  *****" << endl;    cout << "*****  3、删除联系人  *****" << endl;    cout << "*****  4、查找联系人  *****" << endl;    cout << "*****  5、修改联系人  *****" << endl;    cout << "*****  6、清空联系人  *****" << endl;    cout << "*****  7、退出联系人  *****" << endl;    cout << "**************************" << endl;}</code></pre><h3 id="2、退出功能"><a href="#2、退出功能" class="headerlink" title="2、退出功能"></a>2、退出功能</h3><p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将震哥哥架构进行搭建，当用户选择0时，执行推出，选择其他的先不做操作也不做退出程序</p><pre class=" language-c++"><code class="language-c++"> while (1)    {         showMenu();        int choose = 0;        cout << "请输入你的选项：" << endl;        cin >> choose;        switch (choose)        {        case 1: //添加联系人            break;        case 2: //显示联系人            break;        case 3: //删除联系人            break;        case 4: //查找联系人            break;        case 5: //修改联系人            break;        case 6: //清空联系人            break;        case 0: //退出联系人0            cout << "欢迎下次使用" << endl;            system("pause"); //按任意键            return 0;        //退出程序            break;        default:            break;        }    }</code></pre><h3 id="3、添加联系人"><a href="#3、添加联系人" class="headerlink" title="3、添加联系人"></a>3、添加联系人</h3><p>联系人上限为1000人，联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p><p>思路步骤：</p><ul><li><p>设计联系人结构体</p></li><li><p>设计通讯录结构体</p></li><li><p>main()函数中创建通讯录</p></li><li><p>封装添加联系人函数</p></li><li><p>测试添加联系人功能</p></li></ul><h4 id="3-1设计联系人结构体"><a href="#3-1设计联系人结构体" class="headerlink" title="3.1设计联系人结构体"></a>3.1设计联系人结构体</h4><p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p><pre class=" language-c++"><code class="language-c++">//创建联系人结构体struct Person{    string name;//姓名    string sex;//性别 1、男 2、女    int age;//年龄    string phone;//电话    string address;//住址};</code></pre><h4 id="3-2-设计通讯录结构体"><a href="#3-2-设计通讯录结构体" class="headerlink" title="3.2 设计通讯录结构体"></a>3.2 设计通讯录结构体</h4><p>设计可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p><pre class=" language-c++"><code class="language-c++">#define MAX 1000//最大人数//创建通讯录结构体struct addbooks{    struct Person p[MAX];//通讯录中保存的联系人数组    int size;//通讯录中当前记录联系人个数};</code></pre><ul><li>system是调用系统指令</li><li>system(“pause”)   //按任意键继续</li><li>system(“cls”)   //清屏操作</li></ul><h4 id="3-3-main函数中创建通讯录"><a href="#3-3-main函数中创建通讯录" class="headerlink" title="3.3 main函数中创建通讯录"></a>3.3 main函数中创建通讯录</h4><p>在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p><pre class=" language-c++"><code class="language-c++">main函数中添加：    //创建通讯录结构体变量    addbooks abs;    //初始化通讯录中当前人员格式    abs.size = 0;</code></pre><h4 id="3-4-封装添加联系人函数"><a href="#3-4-封装添加联系人函数" class="headerlink" title="3.4 封装添加联系人函数"></a>3.4 封装添加联系人函数</h4><p>思路：添加联系人前先判断通讯录是否已经满了，如果满了就不再添加了，未满情况将联系人信息逐步添加到通讯录当中</p><pre class=" language-c++"><code class="language-c++">//1、添加联系人函数void addPerson(addbooks *abs){    //判断通信录是否已满，如果满了就不再添加了    if (abs->size ==MAX)    {        cout << "通讯录已满，无法添加！" << endl;    }    else    {        //添加具体联系人        //添加姓名；        string name;        cout << "请输入姓名:" << endl;        cin >> name;        abs->p[abs->size].name = name;        //添加性别        int sex = 0;        cout << "请输入性别:" << endl;        cout << "1-----男" << endl;        cout << "2-----女" << endl;        while (1)        {            //如果输入的是1、2，则可以退出循环，            //若输入有误，则重新输入            cin >> sex;            if (sex == 1||sex == 2 )        {            abs->p[abs->size].sex = sex;            break;//退出循环        }                   cout << "您输入有误，请重新输入" << endl;                   }        //添加年龄        int age = 0;        cout << "请输入年龄:" << endl;        cin >> age;        abs->p[abs->size].age = age;        //添加联系电话        string Phone;        cout << "请输入联系电话:" << endl;        cin >> Phone;        abs->p[abs->size].phone = Phone;        //添加家庭住址        string address;        cout << "请输入家庭住址:" << endl;        cin >> address;        abs->p[abs->size].address = address;        //更新通讯录里的人数        abs->size++;        cout << "添加成功" << endl;        system("pause");//请按任意键继续        system("cls");//清屏操作    }}</code></pre><h4 id="3-5-添加联系人功能"><a href="#3-5-添加联系人功能" class="headerlink" title="3.5 添加联系人功能"></a>3.5 添加联系人功能</h4><p>main函数switch语句里面添加：</p><pre class=" language-c++"><code class="language-c++">case 1: //添加联系人            addPerson(&abs);//利用地址传递可以修饰实参            break;</code></pre><h3 id="4、显示联系人"><a href="#4、显示联系人" class="headerlink" title="4、显示联系人"></a>4、显示联系人</h3><p>显示通讯录中已有的联系人信息</p><p>实现步骤：</p><ul><li><p>封装显示联系人函数</p></li><li><p>测试显示联系人功能</p></li></ul><h4 id="4-1-封装显示联系人函数"><a href="#4-1-封装显示联系人函数" class="headerlink" title="4.1 封装显示联系人函数"></a>4.1 封装显示联系人函数</h4><p>判断如果当前通讯录中没有人员，就提示记录为空，人数大于0时，就显示通讯录中的信息</p><pre class=" language-c++"><code class="language-c++">//2、显示所有的联系人void showPerson(addbooks *abs){    //判断通讯录中人数是否为0，如果为0，提示记录为空    //如果不为0，则显示通讯录中的联系人信息    if (abs->size == 0)    {        cout << "通讯录当前为空！" << endl;    }    else    {        for (int i = 0; i < abs->size; i++)//类似于遍历数组        {            cout << "姓名：" << abs->p[i].name << "\t";            //三目运算符，如果为1，返回为男，否则，返回为女            cout << "性别：" << (abs->p[i].sex ==1?"男":"女") <<"\t";            cout << "年龄：" << abs->p[i].age << "\t";            cout << "电话：" << abs->p[i].phone << "\t";            cout << "家庭住址：" << abs->p[i].address << endl;        }    }    system("pause");    system("cls");}</code></pre><h3 id="5、删除联系人"><a href="#5、删除联系人" class="headerlink" title="5、删除联系人"></a>5、删除联系人</h3><p>按照姓名进行删除指定联系人</p><ul><li>封装检测联系人是否存在</li><li>封装删除联系人函数</li><li>测试删除联系人功能</li></ul><h4 id="4-1-封装检测联系人是否存在"><a href="#4-1-封装检测联系人是否存在" class="headerlink" title="4.1 封装检测联系人是否存在"></a>4.1 封装检测联系人是否存在</h4><p>删除联系人之前，我们首先需要判断用户输入的联系人是否存在，如果存在则删除，否则提示用户没有要删除的联系人，因此可以把检测联系人是否存在封装成一个函数，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p><ul><li>switch 语句中，break上面的代码若有多行时，应用{}括起来，形成代码段，否则会报错</li></ul><pre class=" language-c++"><code class="language-c++">//检测联系人是否存在，如果存在，返回联系人所在数组中的具体位置，不存在返回-1//参数1 通讯录   参数2  对比姓名int check(addbooks * abs,string name){    for (int i = 0; i < abs->size; i++)    {        if (abs->p[i].name == name)        {            return i; //找到了，返回这个人在数组中的下标编号        }                   }    return -1; //如果遍历结束都没找到，返回-1}main函数中： case 3: //删除联系人           { cout << "请输入删除联系人的姓名：" << endl;            string name;            cin >> name;            if (check(&abs,name) == -1)            {                cout << "查无此人" << endl;            }            else            {                cout << "找到此人" << endl;            }           }</code></pre><h4 id="4-2-封装删除联系人函数"><a href="#4-2-封装删除联系人函数" class="headerlink" title="4.2 封装删除联系人函数"></a>4.2 封装删除联系人函数</h4><ul><li><p>要删除李四，将李四后的数据做前向移动，并且让通讯录中记录的人员做-1操作</p></li><li><p>   <em>//数据迁移,可以整体迁移</em></p></li></ul><p>  ​      abs-&gt;p[i] = abs-&gt;p[i + 1];</p><pre class=" language-c++"><code class="language-c++">/3、删除指定联系人void deletePerson(addbooks *abs){    cout << "请输入你要删除的联系人：" << endl;    string name;    cin >> name;    //ret = -1   未查到    //ret ！= -1 查到了    int ret = check(abs, name);    if (ret != -1)    {        //查找到此人进行删除的操作        for (int i = ret; i < abs->size; i++)        {            //数据迁移,可以整体迁移            abs->p[i] = abs->p[i + 1];        }        abs->size--; //更新通讯录中的人员数；        cout << "删除成功了" << endl;    }    else    {        cout << "查无此人" << endl;    }    system("pause");    system("cls");}</code></pre><h3 id="6、查找联系人"><a href="#6、查找联系人" class="headerlink" title="6、查找联系人"></a>6、查找联系人</h3><p>按照姓名查看指定联系人信息</p><ul><li><p>封装查找联系人函数</p></li><li><p>测试查找指定联系人</p></li></ul><h4 id="6-1-封装查找联系人函数"><a href="#6-1-封装查找联系人函数" class="headerlink" title="6.1 封装查找联系人函数"></a>6.1 封装查找联系人函数</h4><p>判断用户指定的联系人是否存在，如果存在则显示信息，不存在则提示查无此人</p><pre class=" language-c++"><code class="language-c++">//4、查找指定联系人信息void findPerson(addbooks *abs){    cout << "请输入你要查找的联系人" << endl;    string name;    cin >> name;    //判断指定的联系人是否存在    int fin = check(abs, name);    if (fin != -1) //找到了    {        cout << "姓名：" << abs->p[fin].name << "\t";        //三目运算符，如果为1，返回为男，否则，返回为女        cout << "性别：" << (abs->p[fin].sex == 1 ? "男" : "女") << "\t";        cout << "年龄：" << abs->p[fin].age << "\t";        cout << "电话：" << abs->p[fin].phone << "\t";        cout << "家庭住址：" << abs->p[fin].address << endl;    }    else //未找到    {        cout << "查无此人" << endl;    }    system("pause");    system("cls");}</code></pre><h3 id="7、修改联系人"><a href="#7、修改联系人" class="headerlink" title="7、修改联系人"></a>7、修改联系人</h3><p>按照姓名重新修改指定联系人</p><ul><li><p>封装修改联系人函数</p></li><li><p>测试修改联系人功能</p></li></ul><h4 id="7-1-封装修改联系人函数"><a href="#7-1-封装修改联系人函数" class="headerlink" title="7.1 封装修改联系人函数"></a>7.1 封装修改联系人函数</h4><p>查找用户输入的联系人，如果朝朝成功进行修改操作，查找失败则提示查无此人</p><pre class=" language-c++"><code class="language-c++">//5、修改联系人void changePerson(addbooks * abs){    cout << "请输入你要查找的联系人" << endl;    string name;    cin >> name;    int ret = check(abs, name);    if (ret!=-1)//找到联系人    {        //姓名        cout << "请输入姓名：" << endl;        string name;        cin >> name;        abs->p[ret].name = name;        //性别        cout << "请输入性别：" << endl;        cout << "1-----男" << endl;        cout << "2-----女" << endl;        int sex = 0;         while (1)        {            //如果输入的是1、2，则可以退出循环，            //若输入有误，则重新输入            cin >> sex;            if (sex == 1 || sex == 2)            {                abs->p[ret].sex = sex;                break; //退出循环            }            cout << "您输入有误，请重新输入" << endl;        }                //年龄        cout << "请输入年龄：" << endl;        int age;        cin >> age;        abs->p[ret].age = age;        //电话        cout << "请输入联系电话：" << endl;        string phone;        cin >> phone;        abs->p[ret].phone = phone;        //住址        cout << "请输入家庭住址：" << endl;        string address;        cin >> address;        abs->p[ret].address = address;        cout << "修改成功" << endl;    }    else //未找到联系人    {        cout << "查无此人" << endl;    }    //按任意键清屏    system("pause");    system("cls");}</code></pre><h3 id="8、清空联系人"><a href="#8、清空联系人" class="headerlink" title="8、清空联系人"></a>8、清空联系人</h3><p>清空通讯录中所有信息</p><ul><li><p>封装清空联系人函数</p></li><li><p>测试清空联系人</p></li></ul><h4 id="10-1-封装清空联系人函数"><a href="#10-1-封装清空联系人函数" class="headerlink" title="10.1 封装清空联系人函数"></a>10.1 封装清空联系人函数</h4><p>将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人人数置为0，做逻辑清空即可</p><ul><li>只是逻辑清空，内存在定义的时候就已经分配好了</li><li>但是关闭之后也自然释放内存了</li><li>==是逻辑判断，=是赋值</li></ul><pre class=" language-c++"><code class="language-c++">void cleanPerson(addbooks *abs){    abs->size = 0; //将当前记录联系人数量置为0，做逻辑清空操作    cout << "通讯录已清空" << endl;    system("pause");    system("cls");}main函数中： case 6: //清空联系人        {            cout << "你确定要清空数据吗" << endl;            cout << "1---确定" << endl;            cout << "2---误操作" << endl;            int an = 0;            cin >> an;            switch (an)            {            case 1:                cleanPerson(&abs);                break;            case 2:                cout << "别再手滑了哦" << endl;                system("pause");                system("cls");                break;            default:                break;            }        }</code></pre><h3 id="9、完整程序展示"><a href="#9、完整程序展示" class="headerlink" title="9、完整程序展示"></a>9、完整程序展示</h3><p>优化了一些内容，更加人性化，啦啦啦，满满的成就感</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;#define MAX 1000 //最大人数//菜单界面void showMenu(){    cout << "**************************" << endl;    cout << "*****  1、添加联系人  *****" << endl;    cout << "*****  2、显示联系人  *****" << endl;    cout << "*****  3、删除联系人  *****" << endl;    cout << "*****  4、查找联系人  *****" << endl;    cout << "*****  5、修改联系人  *****" << endl;    cout << "*****  6、清空联系人  *****" << endl;    cout << "*****  0、退出联系人  *****" << endl;    cout << "**************************" << endl;};//创建联系人结构体struct Person{    string name;    //姓名    int sex;        //性别 1、男 2、女    int age;        //年龄    string phone;   //电话    string address; //住址};//创建通讯录结构体struct addbooks{    struct Person p[MAX]; //通讯录中保存的联系人数组    int size;             //通讯录中当前记录联系人个数};//1、添加联系人函数void addPerson(addbooks *abs){    //判断通信录是否已满，如果满了就不再添加了    if (abs->size == MAX)    {        cout << "通讯录已满，无法添加！" << endl;    }    else    {        //添加具体联系人        //添加姓名；        string name;        cout << "请输入姓名:" << endl;        cin >> name;        abs->p[abs->size].name = name;        //添加性别        int sex = 0;        cout << "请输入性别:" << endl;        cout << "1-----男" << endl;        cout << "2-----女" << endl;        while (1)        {            //如果输入的是1、2，则可以退出循环，            //若输入有误，则重新输入            cin >> sex;            if (sex == 1 || sex == 2)            {                abs->p[abs->size].sex = sex;                break; //退出循环            }            cout << "您输入有误，请重新输入" << endl;        }        //添加年龄        int age = 0;        cout << "请输入年龄:" << endl;        cin >> age;        abs->p[abs->size].age = age;        //添加联系电话        string Phone;        cout << "请输入联系电话:" << endl;        cin >> Phone;        abs->p[abs->size].phone = Phone;        //添加家庭住址        string address;        cout << "请输入家庭住址:" << endl;        cin >> address;        abs->p[abs->size].address = address;        //更新通讯录里的人数        abs->size++;        cout << "添加成功" << endl;        system("pause"); //请按任意键继续        system("cls");   //清屏操作    }}//2、显示所有的联系人void showPerson(addbooks *abs){    //判断通讯录中人数是否为0，如果为0，提示记录为空    //如果不为0，则显示通讯录中的联系人信息    if (abs->size == 0)    {        cout << "通讯录当前为空！" << endl;    }    else    {        for (int i = 0; i < abs->size; i++) //类似于遍历数组        {            cout << "姓名：" << abs->p[i].name << "\t";            //三目运算符，如果为1，返回为男，否则，返回为女            cout << "性别：" << (abs->p[i].sex == 1 ? "男" : "女") << "\t";            cout << "年龄：" << abs->p[i].age << "\t";            cout << "电话：" << abs->p[i].phone << "\t";            cout << "家庭住址：" << abs->p[i].address << endl;        }    }    system("pause");    system("cls");}//检测联系人是否存在，如果存在，返回联系人所在数组中的具体位置，不存在返回-1//参数1 通讯录   参数2  对比姓名int check(addbooks *abs, string name){    for (int i = 0; i < abs->size; i++)    {        if (abs->p[i].name == name)        {            return i; //找到了，返回这个人在数组中的下标编号        }    }    return -1; //如果遍历结束都没找到，返回-1}//3、删除指定联系人void deletePerson(addbooks *abs){    cout << "请输入你要删除的联系人：" << endl;    string name;    cin >> name;    //ret = -1   未查到    //ret ！= -1 查到了    int ret = check(abs, name);    if (ret != -1)    {        //查找到此人进行删除的操作        for (int i = ret; i < abs->size; i++)        {            //数据迁移,可以整体迁移            abs->p[i] = abs->p[i + 1];        }        abs->size--; //更新通讯录中的人员数；        cout << "删除成功了" << endl;    }    else    {        cout << "查无此人" << endl;    }    system("pause");    system("cls");}//4、查找指定联系人信息void findPerson(addbooks *abs){    cout << "请输入你要查找的联系人" << endl;    string name;    cin >> name;    //判断指定的联系人是否存在    int fin = check(abs, name);    if (fin != -1) //找到了    {        cout << "姓名：" << abs->p[fin].name << "\t";        //三目运算符，如果为1，返回为男，否则，返回为女        cout << "性别：" << (abs->p[fin].sex == 1 ? "男" : "女") << "\t";        cout << "年龄：" << abs->p[fin].age << "\t";        cout << "电话：" << abs->p[fin].phone << "\t";        cout << "家庭住址：" << abs->p[fin].address << endl;    }    else //未找到    {        cout << "查无此人" << endl;    }    system("pause");    system("cls");}//5、修改联系人void changePerson(addbooks *abs){    cout << "请输入你要查找的联系人" << endl;    string name;    cin >> name;    int ret = check(abs, name);    if (ret != -1) //找到联系人    {        //姓名        cout << "请输入姓名：" << endl;        string name;        cin >> name;        abs->p[ret].name = name;        //性别        cout << "请输入性别：" << endl;        cout << "1-----男" << endl;        cout << "2-----女" << endl;        int sex = 0;        while (1)        {            //如果输入的是1、2，则可以退出循环，            //若输入有误，则重新输入            cin >> sex;            if (sex == 1 || sex == 2)            {                abs->p[ret].sex = sex;                break; //退出循环            }            cout << "您输入有误，请重新输入" << endl;        }        //年龄        cout << "请输入年龄：" << endl;        int age;        cin >> age;        abs->p[ret].age = age;        //电话        cout << "请输入联系电话：" << endl;        string phone;        cin >> phone;        abs->p[ret].phone = phone;        //住址        cout << "请输入家庭住址：" << endl;        string address;        cin >> address;        abs->p[ret].address = address;        cout << "修改成功" << endl;    }    else //未找到联系人    {        cout << "查无此人" << endl;    }    //按任意键清屏    system("pause");    system("cls");}void cleanPerson(addbooks *abs){    abs->size = 0; //将当前记录联系人数量置为0，做逻辑清空操作    cout << "通讯录已清空" << endl;    system("pause");    system("cls");}int main(){    //创建通讯录结构体变量    addbooks abs;    //初始化通讯录中当前人员格式    abs.size = 0;    //在main函数中调用封装好的函数    while (1)    {        showMenu();        int choose = 0;        cout << "请输入你的选项：" << endl;        cin >> choose;        switch (choose)        {        case 1:              //添加联系人            addPerson(&abs); //利用地址传递可以修饰实参            break;        case 2: //显示联系人            showPerson(&abs);            break;        case 3: //删除联系人            // {            //     cout << "请输入删除联系人的姓名：" << endl;            //     string name;            //     cin >> name;            //     if (check(&abs, name) == -1)            //     {            //         cout << "查无此人" << endl;            //     }            //     else            //     {            //         cout << "找到此人" << endl;            //     }            // }            deletePerson(&abs);            break;        case 4: //查找联系人            findPerson(&abs);            break;        case 5: //修改联系人            changePerson(&abs);            break;        case 6: //清空联系人        {            cout << "你确定要清空数据吗" << endl;            cout << "1---确定" << endl;            cout << "2---误操作" << endl;            int an = 0;            cin >> an;            switch (an)            {            case 1:                cleanPerson(&abs);                break;            case 2:                cout << "别再手滑了哦" << endl;                system("pause");                system("cls");                break;            default:                break;            }        }        break;        case 0: //退出联系人0            cout << "欢迎下次使用" << endl;            system("pause"); //按任意键            return 0;        //退出程序            break;        default:            break;        }    }    system("pause"); //程序不会一闪而过    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++开发环境搭建</title>
      <link href="2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/"/>
      <url>2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="基于VS-Code-搭建轻量便捷的C-开发环境"><a href="#基于VS-Code-搭建轻量便捷的C-开发环境" class="headerlink" title="基于VS Code 搭建轻量便捷的C++开发环境"></a>基于VS Code 搭建轻量便捷的C++开发环境</h1> <span id="more"></span><p>最近正在学习C++,一款强大的编译器当然是必不可少的啦！前后试用了Visual Studio、Dev-Cpp、Notepad++、 CodeBlocks之类的编译器，最后真的感觉 嗯！ VS Code，真香！ 既可以快速运行单文件的小练习，也可以配合Cmake开发工程 舒服的代码高亮和智能补全、快速跳转简直不要太好用！前期的摸索当中看了好多资料（网上很多称作是看一篇就够了，但感觉写的却非常模糊），当然也走了很多弯路，浪费了不少时间，综上，总结一下环境搭建流程，适合小白，亲测有效！</p><h2 id="一、明确目的、理清思路"><a href="#一、明确目的、理清思路" class="headerlink" title="一、明确目的、理清思路"></a>一、明确目的、理清思路</h2><p>首先明确一下VS Code只是一个代码编译器，能编译、调试、运行就完事了，可以理解为我们之前使用的DevC++增加了用户体验，替换了舒适手感就变为VS Code了，接下来是我们需要解决的完成的一些任务</p><ul><li><p>使用VS Code编译C++代码：需要安装编译器</p></li><li><p>使用VS Code可以编译、调试、运行程序：需要安装插件，且需要添加两个json为文件</p></li><li><p>若VS Code编译头文件库时报错：需要添加.h文件库的位置（==本人在这点踩坑了==）</p></li></ul><h2 id="二、具体步骤"><a href="#二、具体步骤" class="headerlink" title="二、具体步骤"></a>二、具体步骤</h2><h3 id="1、下载安装解决编译器问题"><a href="#1、下载安装解决编译器问题" class="headerlink" title="1、下载安装解决编译器问题"></a>1、下载安装解决编译器问题</h3><ul><li>首先下载VS Code(官网即可)，正常安装，遇到打勾的全选即可</li></ul><ul><li><p>下载安装编译器，我这里使用的是ming-w64 ，ming-w64下载（c++的工具包） 官方：<a href="https://sourceforge.net/projects/mingw-w64/">https://sourceforge.net/projects/mingw-w64/</a></p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/1.png" class=""><p>==一定要下载该版本，否则没有bin文件，亲测==</p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/2.png" class=""><p>==路径是不可以有中文或空格的，可能会导致gdb无法正常工作没有办法debug放不了断点什么的了==</p><p>下载好VS Code之后需要把bin文件的路径添加到系统的PATH里面</p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/3.png" class=""><p>配置好之后输入cmd，输入 gcc -v 查看gcc版本即可如下图</p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/4.png" class=""></li></ul><h3 id="2、安装VS-Code插件"><a href="#2、安装VS-Code插件" class="headerlink" title="2、安装VS Code插件"></a>2、安装VS Code插件</h3><ul><li><p>下载安装完之后，VS Code是空的，打开VS Code装几个插件，你需要什么功能就去下载什么功能，可以理解为手机里的应用商店。</p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/5.png" class=""><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/6.png" class=""></li></ul><ul><li>输入需要下载的插件，比如安装C/C++ ,Code  Runner就可以意见运行程序了，可以选择性的添加想要的插件</li></ul><h3 id="3、运行调试程序，配置文件"><a href="#3、运行调试程序，配置文件" class="headerlink" title="3、运行调试程序，配置文件"></a>3、运行调试程序，配置文件</h3><ul><li><p>接下来新建一个我们代码存放的文件夹（电脑上习惯的位置）用于存放代码，接下来配置好的调试环境，进队存放在这一个文件夹及文件夹的子目录里的程序作用</p><p>上面就是我在电脑里创建的一个用于存放.cpp文件的文件夹</p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/7.png" class=""></li><li><p>接下来配置文件让程序编译起来，在文件夹下新建.VS Code文件夹并新建两个<code>json</code>文件分别是<code>launch.json</code> 和<code>task.json </code></p><ul><li><code>launch.json</code> 配置启动的一些参数</li><li><code>task.json</code> 配置编译器的相关参数  可以用最新的c++编译器</li></ul><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/8.png" class=""><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/9.png" class=""></li></ul><p><code> &quot;externalConsole&quot;: false,</code> <em>// 为true时使用单独的cmd窗口，与其它IDE一致；18年10月后设为false可调用VSC内置终端</em></p><p>  另外<code>shift +alt+f</code>   自动整理代码 （非常好用，强推）</p><h3 id="4、头文件报错怎么办"><a href="#4、头文件报错怎么办" class="headerlink" title="4、头文件报错怎么办"></a>4、头文件报错怎么办</h3><p>也就是我遇到的最头疼的问题，在我们VS Code代码写了一大半回过头时，就会发现</p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/10.png" class=""><p>what?库函数都找不到？这个问题也是纠缠我时间最长的问题，很多资料帖子都没有写的很清楚，但我认为应该是很多人遇到的问题吧。</p><p>经过不断查找、询问、试错之后我发现，VS Code找不到都文件的问题是由于windows下VS Code默认的编译器是微软的MSVC(Microsoft Visual Studio使用的编译器）的头文件路径，如果没有安装Microsoft Visual Studio肯定会因为炸不到头文件而报错的，所有我们要手动修改配置。</p><p>ctrl +shift +p ,”C/Cpp:Edit configurations”,生成c_cpp_properties.json文件如图，在这个文件里需要修改基础，如includePath和compilerPath：</p><img src="/2021/05/10/ji-yu-vscode-da-jian-qing-liang-bian-jie-de-c-kai-fa-huan-jing/11.png" class=""><p>还要想添加其他的库，都可以用这样的方式进行添加，上面的配置完成之后，再回到你创建的.cpp文件，你就会发现不会报错了</p><p>基于VS Code 搭建轻量便捷的C++开发环境配置完毕，其实过程还是非常简单的，把我的经验记录分享给大家，加油！</p><p>Good  Luck   to   you!</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
